#ifndef S21_MATRIX_H
#define S21_MATRIX_H

#define SUCCESS 1
#define FAILURE 0
#define EPS 1e-7

#include "s21_var.h"

/// @brief !!!выделяет память!!! для матрицы row * column
/// @param row количество строк
/// @param column количество столбцов
/// @param result получает укзатель на структуру матрицы из этой функции
/// @return код работы функции: 0 - OK, 1 - Ошибка, некорректная матрица если
/// подали row <= 0 или col <= 0
int s21_create_matrix(int row, int column, matrix_t *result);

/// @brief освобождает выделенную память для матрицы
/// @param A освобождаемая матрица
void s21_remove_matrix(matrix_t *A);

/// @brief сравнение матриц по размеру, по элементам и проверка на нулевые
/// столбцы или строки
/// @param A первая матрица
/// @param B вторая матрица
/// @return код 1 эквивалентны, 0 разные
int s21_eq_matrix(matrix_t *A, matrix_t *B);

/// @brief !!!выделяет память!!! сумма двух матриц
/// @param A первая матрица
/// @param B вторая матрица
/// @param result сумма двух матриц
/// @return код работы функции: 0 - OK, 1 - Ошибка, некорректная матрица если
/// подали row <= 0 или col <= 0, 2 - Ошибка вычисления (несовпадающие размеры
/// матриц)
int s21_sum_matrix(matrix_t *A, matrix_t *B, matrix_t *result);

/// @brief !!!выделяет память!!! вычетание двух матриц
/// @param A первая матрица
/// @param B вторая матрица
/// @param result результат вычетания двух матриц
/// @return код работы функции: 0 - OK, 1 - Ошибка, некорректная матрица если
/// подали row <= 0 или col <= 0, 2 - Ошибка вычисления (несовпадающие размеры
/// матриц)
int s21_sub_matrix(matrix_t *A, matrix_t *B, matrix_t *result);

/// @brief !!!выделяет память!!! умножение матрицы на число
/// @param A матрица
/// @param number число
/// @param result матрица, результат умноженния матрицы на число
/// @return код работы функции: 0 - OK, 1 - Ошибка, некорректная матрица если
/// подали row <= 0 или col <= 0
int s21_mult_number(matrix_t *A, double number, matrix_t *result);

/// @brief !!!выделяет память!!! умножение двух матриц
/// @param A матрица MxK
/// @param B матрица KxN
/// @param result результирующая матрица MxN
/// @return код работы функции: 0 - OK, 1 - Ошибка, некорректная матрица если
/// подали row <= 0 или col <= 0, 2 - Ошибка вычисления (несовпадающие размеры
/// матриц)
int s21_mult_matrix(matrix_t *A, matrix_t *B, matrix_t *result);

/// @brief !!!выделяет память!!! транспонирование матрицы
/// @param A исходная матрица
/// @param result транспонированная матрица
/// @return код работы функции: 0 - OK, 1 - Ошибка, некорректная матрица если
/// подали row <= 0 или col <= 0
int s21_transpose(matrix_t *A, matrix_t *result);

/// @brief !!!рекурсия и выделение памяти!!! вычисление определителя матрицы
/// @param A исходная матрица
/// @param result адрес переменной куда будет записано значение определитея
/// @return код работы функции: 0 - OK, 1 - Ошибка, некорректная матрица если
/// подали row <= 0 или col <= 0, 2 - Ошибка вычисления (не квадратная матрица)
int s21_determinant(matrix_t *A, double *result);

/// @brief !!!выделение памяти!!! вычисление матрицы миноров
/// @param A исходная матрица
/// @param result адрес переменной куда будет записана матрица миноров
/// @return код работы функции: 0 - OK, 1 - Ошибка, некорректная матрица если
/// подали row <= 0 или col <= 0, 2 - Ошибка вычисления (не квадратная матрица)
int s21_calc_complements(matrix_t *A, matrix_t *result);

/// @brief !!!выделение памяти!!! вычисление обратной матрицы
/// @param A исходная матрица
/// @param result адрес переменной куда будет записана обратная матрица
/// @return код работы функции: 0 - OK, 1 - Ошибка, некорректная матрица если
/// подали row <= 0 или col <= 0, 2 - Ошибка вычисления (не квадратная матрица)
int s21_inverse_matrix(matrix_t *A, matrix_t *result);

#endif
